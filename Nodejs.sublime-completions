{
    "scope": "source.js - variable.other.js",
    "completions": [
        {
            "trigger": "ArrayBuffer();",
            "contents": "ArrayBuffer();"
        },
        {
            "trigger": "Int8Array();",
            "contents": "Int8Array();"
        },
        {
            "trigger": "Uint8Array();",
            "contents": "Uint8Array();"
        },
        {
            "trigger": "Int16Array();",
            "contents": "Int16Array();"
        },
        {
            "trigger": "Uint16Array();",
            "contents": "Uint16Array();"
        },
        {
            "trigger": "Int32Array();",
            "contents": "Int32Array();"
        },
        {
            "trigger": "Uint32Array();",
            "contents": "Uint32Array();"
        },
        {
            "trigger": "Float32Array();",
            "contents": "Float32Array();"
        },
        {
            "trigger": "Float64Array();",
            "contents": "Float64Array();"
        },
        {
            "trigger": "DataView();",
            "contents": "DataView();"
        },
        {
            "trigger": "Buffer(subject, encoding, offset);",
            "contents": "Buffer(subject, encoding, offset);"
        },
        {
            "trigger": "setTimeout();",
            "contents": "setTimeout();"
        },
        {
            "trigger": "setInterval();",
            "contents": "setInterval();"
        },
        {
            "trigger": "clearTimeout();",
            "contents": "clearTimeout();"
        },
        {
            "trigger": "clearInterval();",
            "contents": "clearInterval();"
        },
        {
            "trigger": "process.EventEmitter();",
            "contents": "process.EventEmitter();"
        },
        {
            "trigger": "process.assert();",
            "contents": "process.assert();"
        },
        {
            "trigger": "process._tickCallback();",
            "contents": "process._tickCallback();"
        },
        {
            "trigger": "process.nextTick(callback);",
            "contents": "process.nextTick(callback);"
        },
        {
            "trigger": "process.openStdin();",
            "contents": "process.openStdin();"
        },
        {
            "trigger": "process.exit(code);",
            "contents": "process.exit(code);"
        },
        {
            "trigger": "process.kill(pid, sig);",
            "contents": "process.kill(pid, sig);"
        },
        {
            "trigger": "process.addListener(type, listener);",
            "contents": "process.addListener(type, listener);"
        },
        {
            "trigger": "process._needTickCallback();",
            "contents": "process._needTickCallback();"
        },
        {
            "trigger": "process.on(type, listener);",
            "contents": "process.on(type, listener);"
        },
        {
            "trigger": "process.reallyExit();",
            "contents": "process.reallyExit();"
        },
        {
            "trigger": "process.removeListener(type, listener);",
            "contents": "process.removeListener(type, listener);"
        },
        {
            "trigger": "process.chdir();",
            "contents": "process.chdir();"
        },
        {
            "trigger": "process.debug();",
            "contents": "process.debug();"
        },
        {
            "trigger": "process.cwd();",
            "contents": "process.cwd();"
        },
        {
            "trigger": "process.error();",
            "contents": "process.error();"
        },
        {
            "trigger": "process.watchFile();",
            "contents": "process.watchFile();"
        },
        {
            "trigger": "process.umask();",
            "contents": "process.umask();"
        },
        {
            "trigger": "process._kill();",
            "contents": "process._kill();"
        },
        {
            "trigger": "process.unwatchFile();",
            "contents": "process.unwatchFile();"
        },
        {
            "trigger": "process._debugProcess();",
            "contents": "process._debugProcess();"
        },
        {
            "trigger": "process.mixin();",
            "contents": "process.mixin();"
        },
        {
            "trigger": "process.dlopen();",
            "contents": "process.dlopen();"
        },
        {
            "trigger": "process.createChildProcess();",
            "contents": "process.createChildProcess();"
        },
        {
            "trigger": "process.inherits();",
            "contents": "process.inherits();"
        },
        {
            "trigger": "process.uptime();",
            "contents": "process.uptime();"
        },
        {
            "trigger": "process._byteLength();",
            "contents": "process._byteLength();"
        },
        {
            "trigger": "process.memoryUsage();",
            "contents": "process.memoryUsage();"
        },
        {
            "trigger": "process.uvCounters();",
            "contents": "process.uvCounters();"
        },
        {
            "trigger": "process.binding();",
            "contents": "process.binding();"
        },
        {
            "trigger": "process.setMaxListeners(n);",
            "contents": "process.setMaxListeners(n);"
        },
        {
            "trigger": "process.emit();",
            "contents": "process.emit();"
        },
        {
            "trigger": "process.once(type, listener);",
            "contents": "process.once(type, listener);"
        },
        {
            "trigger": "process.removeAllListeners(type);",
            "contents": "process.removeAllListeners(type);"
        },
        {
            "trigger": "process.listeners(type);",
            "contents": "process.listeners(type);"
        },
        {
            "trigger": "require.resolve(request);",
            "contents": "require.resolve(request);"
        },
        {
            "trigger": "require.registerExtension();",
            "contents": "require.registerExtension();"
        },
        {
            "trigger": "start(argv, stdin, stdout);",
            "contents": "start(argv, stdin, stdout);"
        },
        {
            "trigger": "Protocol();",
            "contents": "Protocol();"
        },
        {
            "trigger": "Client();",
            "contents": "Client();"
        },
        {
            "trigger": "init(list);",
            "contents": "init(list);"
        },
        {
            "trigger": "peek(list);",
            "contents": "peek(list);"
        },
        {
            "trigger": "shift(list);",
            "contents": "shift(list);"
        },
        {
            "trigger": "remove(item);",
            "contents": "remove(item);"
        },
        {
            "trigger": "append(list, item);",
            "contents": "append(list, item);"
        },
        {
            "trigger": "isEmpty(list);",
            "contents": "isEmpty(list);"
        },
        {
            "trigger": "AssertionError;",
            "contents": "AssertionError;"
        },
        {
            "trigger": "fail(actual, expected, message, operator, stackStartFunction);",
            "contents": "fail(actual, expected, message, operator, stackStartFunction);"
        },
        {
            "trigger": "ok(value, message);",
            "contents": "ok(value, message);"
        },
        {
            "trigger": "equal(actual, expected, message);",
            "contents": "equal(actual, expected, message);"
        },
        {
            "trigger": "notEqual(actual, expected, message);",
            "contents": "notEqual(actual, expected, message);"
        },
        {
            "trigger": "deepEqual(actual, expected, message);",
            "contents": "deepEqual(actual, expected, message);"
        },
        {
            "trigger": "notDeepEqual(actual, expected, message);",
            "contents": "notDeepEqual(actual, expected, message);"
        },
        {
            "trigger": "strictEqual(actual, expected, message);",
            "contents": "strictEqual(actual, expected, message);"
        },
        {
            "trigger": "notStrictEqual(actual, expected, message);",
            "contents": "notStrictEqual(actual, expected, message);"
        },
        {
            "trigger": "throws(block, /*optional*/error, /*optional*/message);",
            "contents": "throws(block, /*optional*/error, /*optional*/message);"
        },
        {
            "trigger": "doesNotThrow(block, /*optional*/error, /*optional*/message);",
            "contents": "doesNotThrow(block, /*optional*/error, /*optional*/message);"
        },
        {
            "trigger": "ifError(err);",
            "contents": "ifError(err);"
        },
        {
            "trigger": "SlowBuffer();",
            "contents": "SlowBuffer();"
        },
        {
            "trigger": "Buffer(subject, encoding, offset);",
            "contents": "Buffer(subject, encoding, offset);"
        },
        {
            "trigger": "readIEEE754(buffer, offset, isBE, mLen, nBytes);",
            "contents": "readIEEE754(buffer, offset, isBE, mLen, nBytes);"
        },
        {
            "trigger": "writeIEEE754(buffer, value, offset, isBE, mLen, nBytes);",
            "contents": "writeIEEE754(buffer, value, offset, isBE, mLen, nBytes);"
        },
        {
            "trigger": "fork(modulePath, args, options);",
            "contents": "fork(modulePath, args, options);"
        },
        {
            "trigger": "_forkChild();",
            "contents": "_forkChild();"
        },
        {
            "trigger": "exec(command /*, options, callback */);",
            "contents": "exec(command /*, options, callback */);"
        },
        {
            "trigger": "execFile(file /* args, options, callback */);",
            "contents": "execFile(file /* args, options, callback */);"
        },
        {
            "trigger": "spawn(file, args, options);",
            "contents": "spawn(file, args, options);"
        },
        {
            "trigger": "fork();",
            "contents": "fork();"
        },
        {
            "trigger": "_startWorker();",
            "contents": "_startWorker();"
        },
        {
            "trigger": "_getServer(address, port, addressType, cb);",
            "contents": "_getServer(address, port, addressType, cb);"
        },
        {
            "trigger": "setMaxListeners(n);",
            "contents": "setMaxListeners(n);"
        },
        {
            "trigger": "emit();",
            "contents": "emit();"
        },
        {
            "trigger": "addListener(type, listener);",
            "contents": "addListener(type, listener);"
        },
        {
            "trigger": "on(type, listener);",
            "contents": "on(type, listener);"
        },
        {
            "trigger": "once(type, listener);",
            "contents": "once(type, listener);"
        },
        {
            "trigger": "removeListener(type, listener);",
            "contents": "removeListener(type, listener);"
        },
        {
            "trigger": "removeAllListeners(type);",
            "contents": "removeAllListeners(type);"
        },
        {
            "trigger": "listeners(type);",
            "contents": "listeners(type);"
        },
        {
            "trigger": "log();",
            "contents": "log();"
        },
        {
            "trigger": "info();",
            "contents": "info();"
        },
        {
            "trigger": "warn();",
            "contents": "warn();"
        },
        {
            "trigger": "error();",
            "contents": "error();"
        },
        {
            "trigger": "dir(object);",
            "contents": "dir(object);"
        },
        {
            "trigger": "time(label);",
            "contents": "time(label);"
        },
        {
            "trigger": "timeEnd(label);",
            "contents": "timeEnd(label);"
        },
        {
            "trigger": "trace(label);",
            "contents": "trace(label);"
        },
        {
            "trigger": "assert(expression);",
            "contents": "assert(expression);"
        },
        {
            "trigger": "Credentials(secureProtocol, flags, context);",
            "contents": "Credentials(secureProtocol, flags, context);"
        },
        {
            "trigger": "createCredentials(options, context);",
            "contents": "createCredentials(options, context);"
        },
        {
            "trigger": "Hash();",
            "contents": "Hash();"
        },
        {
            "trigger": "createHash(hash);",
            "contents": "createHash(hash);"
        },
        {
            "trigger": "Hmac();",
            "contents": "Hmac();"
        },
        {
            "trigger": "createHmac(hmac, key);",
            "contents": "createHmac(hmac, key);"
        },
        {
            "trigger": "Cipher();",
            "contents": "Cipher();"
        },
        {
            "trigger": "createCipher(cipher, password);",
            "contents": "createCipher(cipher, password);"
        },
        {
            "trigger": "createCipheriv(cipher, key, iv);",
            "contents": "createCipheriv(cipher, key, iv);"
        },
        {
            "trigger": "Decipher();",
            "contents": "Decipher();"
        },
        {
            "trigger": "createDecipher(cipher, password);",
            "contents": "createDecipher(cipher, password);"
        },
        {
            "trigger": "createDecipheriv(cipher, key, iv);",
            "contents": "createDecipheriv(cipher, key, iv);"
        },
        {
            "trigger": "Sign();",
            "contents": "Sign();"
        },
        {
            "trigger": "createSign(algorithm);",
            "contents": "createSign(algorithm);"
        },
        {
            "trigger": "Verify();",
            "contents": "Verify();"
        },
        {
            "trigger": "createVerify(algorithm);",
            "contents": "createVerify(algorithm);"
        },
        {
            "trigger": "DiffieHellman();",
            "contents": "DiffieHellman();"
        },
        {
            "trigger": "createDiffieHellman(size_or_key, enc);",
            "contents": "createDiffieHellman(size_or_key, enc);"
        },
        {
            "trigger": "pbkdf2();",
            "contents": "pbkdf2();"
        },
        {
            "trigger": "randomBytes();",
            "contents": "randomBytes();"
        },
        {
            "trigger": "pseudoRandomBytes();",
            "contents": "pseudoRandomBytes();"
        },
        {
            "trigger": "rng();",
            "contents": "rng();"
        },
        {
            "trigger": "prng();",
            "contents": "prng();"
        },
        {
            "trigger": "Socket(type, listener);",
            "contents": "Socket(type, listener);"
        },
        {
            "trigger": "createSocket(type, listener);",
            "contents": "createSocket(type, listener);"
        },
        {
            "trigger": "lookup(domain, family, callback);",
            "contents": "lookup(domain, family, callback);"
        },
        {
            "trigger": "resolve4(name, callback);",
            "contents": "resolve4(name, callback);"
        },
        {
            "trigger": "resolve6(name, callback);",
            "contents": "resolve6(name, callback);"
        },
        {
            "trigger": "resolveCname(name, callback);",
            "contents": "resolveCname(name, callback);"
        },
        {
            "trigger": "resolveMx(name, callback);",
            "contents": "resolveMx(name, callback);"
        },
        {
            "trigger": "resolveNs(name, callback);",
            "contents": "resolveNs(name, callback);"
        },
        {
            "trigger": "resolveTxt(name, callback);",
            "contents": "resolveTxt(name, callback);"
        },
        {
            "trigger": "resolveSrv(name, callback);",
            "contents": "resolveSrv(name, callback);"
        },
        {
            "trigger": "reverse(name, callback);",
            "contents": "reverse(name, callback);"
        },
        {
            "trigger": "resolve(domain, type_, callback_);",
            "contents": "resolve(domain, type_, callback_);"
        },
        {
            "trigger": "EventEmitter();",
            "contents": "EventEmitter();"
        },
        {
            "trigger": "FreeList(name, max, constructor);",
            "contents": "FreeList(name, max, constructor);"
        },
        {
            "trigger": "Stats();",
            "contents": "Stats();"
        },
        {
            "trigger": "readFile(path, encoding_);",
            "contents": "readFile(path, encoding_);"
        },
        {
            "trigger": "readFileSync(path, encoding);",
            "contents": "readFileSync(path, encoding);"
        },
        {
            "trigger": "close(fd, callback);",
            "contents": "close(fd, callback);"
        },
        {
            "trigger": "closeSync(fd);",
            "contents": "closeSync(fd);"
        },
        {
            "trigger": "open(path, flags, mode, callback);",
            "contents": "open(path, flags, mode, callback);"
        },
        {
            "trigger": "openSync(path, flags, mode);",
            "contents": "openSync(path, flags, mode);"
        },
        {
            "trigger": "read(fd, buffer, offset, length, position, callback);",
            "contents": "read(fd, buffer, offset, length, position, callback);"
        },
        {
            "trigger": "readSync(fd, buffer, offset, length, position);",
            "contents": "readSync(fd, buffer, offset, length, position);"
        },
        {
            "trigger": "write(fd, buffer, offset, length, position, callback);",
            "contents": "write(fd, buffer, offset, length, position, callback);"
        },
        {
            "trigger": "writeSync(fd, buffer, offset, length, position);",
            "contents": "writeSync(fd, buffer, offset, length, position);"
        },
        {
            "trigger": "rename(oldPath, newPath, callback);",
            "contents": "rename(oldPath, newPath, callback);"
        },
        {
            "trigger": "renameSync(oldPath, newPath);",
            "contents": "renameSync(oldPath, newPath);"
        },
        {
            "trigger": "truncate(fd, len, callback);",
            "contents": "truncate(fd, len, callback);"
        },
        {
            "trigger": "truncateSync(fd, len);",
            "contents": "truncateSync(fd, len);"
        },
        {
            "trigger": "rmdir(path, callback);",
            "contents": "rmdir(path, callback);"
        },
        {
            "trigger": "rmdirSync(path);",
            "contents": "rmdirSync(path);"
        },
        {
            "trigger": "fdatasync(fd, callback);",
            "contents": "fdatasync(fd, callback);"
        },
        {
            "trigger": "fdatasyncSync(fd);",
            "contents": "fdatasyncSync(fd);"
        },
        {
            "trigger": "fsync(fd, callback);",
            "contents": "fsync(fd, callback);"
        },
        {
            "trigger": "fsyncSync(fd);",
            "contents": "fsyncSync(fd);"
        },
        {
            "trigger": "mkdir(path, mode, callback);",
            "contents": "mkdir(path, mode, callback);"
        },
        {
            "trigger": "mkdirSync(path, mode);",
            "contents": "mkdirSync(path, mode);"
        },
        {
            "trigger": "sendfile(outFd, inFd, inOffset, length, callback);",
            "contents": "sendfile(outFd, inFd, inOffset, length, callback);"
        },
        {
            "trigger": "sendfileSync(outFd, inFd, inOffset, length);",
            "contents": "sendfileSync(outFd, inFd, inOffset, length);"
        },
        {
            "trigger": "readdir(path, callback);",
            "contents": "readdir(path, callback);"
        },
        {
            "trigger": "readdirSync(path);",
            "contents": "readdirSync(path);"
        },
        {
            "trigger": "fstat(fd, callback);",
            "contents": "fstat(fd, callback);"
        },
        {
            "trigger": "lstat(path, callback);",
            "contents": "lstat(path, callback);"
        },
        {
            "trigger": "stat(path, callback);",
            "contents": "stat(path, callback);"
        },
        {
            "trigger": "fstatSync(fd);",
            "contents": "fstatSync(fd);"
        },
        {
            "trigger": "lstatSync(path);",
            "contents": "lstatSync(path);"
        },
        {
            "trigger": "statSync(path);",
            "contents": "statSync(path);"
        },
        {
            "trigger": "readlink(path, callback);",
            "contents": "readlink(path, callback);"
        },
        {
            "trigger": "readlinkSync(path);",
            "contents": "readlinkSync(path);"
        },
        {
            "trigger": "symlink(destination, path, mode_, callback);",
            "contents": "symlink(destination, path, mode_, callback);"
        },
        {
            "trigger": "symlinkSync(destination, path, mode);",
            "contents": "symlinkSync(destination, path, mode);"
        },
        {
            "trigger": "link(srcpath, dstpath, callback);",
            "contents": "link(srcpath, dstpath, callback);"
        },
        {
            "trigger": "linkSync(srcpath, dstpath);",
            "contents": "linkSync(srcpath, dstpath);"
        },
        {
            "trigger": "unlink(path, callback);",
            "contents": "unlink(path, callback);"
        },
        {
            "trigger": "unlinkSync(path);",
            "contents": "unlinkSync(path);"
        },
        {
            "trigger": "fchmod(fd, mode, callback);",
            "contents": "fchmod(fd, mode, callback);"
        },
        {
            "trigger": "fchmodSync(fd, mode);",
            "contents": "fchmodSync(fd, mode);"
        },
        {
            "trigger": "chmod(path, mode, callback);",
            "contents": "chmod(path, mode, callback);"
        },
        {
            "trigger": "chmodSync(path, mode);",
            "contents": "chmodSync(path, mode);"
        },
        {
            "trigger": "fchown(fd, uid, gid, callback);",
            "contents": "fchown(fd, uid, gid, callback);"
        },
        {
            "trigger": "fchownSync(fd, uid, gid);",
            "contents": "fchownSync(fd, uid, gid);"
        },
        {
            "trigger": "chown(path, uid, gid, callback);",
            "contents": "chown(path, uid, gid, callback);"
        },
        {
            "trigger": "chownSync(path, uid, gid);",
            "contents": "chownSync(path, uid, gid);"
        },
        {
            "trigger": "_toUnixTimestamp(time);",
            "contents": "_toUnixTimestamp(time);"
        },
        {
            "trigger": "utimes(path, atime, mtime, callback);",
            "contents": "utimes(path, atime, mtime, callback);"
        },
        {
            "trigger": "utimesSync(path, atime, mtime);",
            "contents": "utimesSync(path, atime, mtime);"
        },
        {
            "trigger": "futimes(fd, atime, mtime, callback);",
            "contents": "futimes(fd, atime, mtime, callback);"
        },
        {
            "trigger": "futimesSync(fd, atime, mtime);",
            "contents": "futimesSync(fd, atime, mtime);"
        },
        {
            "trigger": "writeFile(path, data, encoding_, callback);",
            "contents": "writeFile(path, data, encoding_, callback);"
        },
        {
            "trigger": "writeFileSync(path, data, encoding);",
            "contents": "writeFileSync(path, data, encoding);"
        },
        {
            "trigger": "watch(filename);",
            "contents": "watch(filename);"
        },
        {
            "trigger": "watchFile(filename);",
            "contents": "watchFile(filename);"
        },
        {
            "trigger": "unwatchFile(filename);",
            "contents": "unwatchFile(filename);"
        },
        {
            "trigger": "realpathSync(p, cache);",
            "contents": "realpathSync(p, cache);"
        },
        {
            "trigger": "realpath(p, cache, cb);",
            "contents": "realpath(p, cache, cb);"
        },
        {
            "trigger": "createReadStream(path, options);",
            "contents": "createReadStream(path, options);"
        },
        {
            "trigger": "ReadStream(path, options);",
            "contents": "ReadStream(path, options);"
        },
        {
            "trigger": "FileReadStream(path, options);",
            "contents": "FileReadStream(path, options);"
        },
        {
            "trigger": "createWriteStream(path, options);",
            "contents": "createWriteStream(path, options);"
        },
        {
            "trigger": "WriteStream(path, options);",
            "contents": "WriteStream(path, options);"
        },
        {
            "trigger": "FileWriteStream(path, options);",
            "contents": "FileWriteStream(path, options);"
        },
        {
            "trigger": "SyncWriteStream(fd);",
            "contents": "SyncWriteStream(fd);"
        },
        {
            "trigger": "IncomingMessage(socket);",
            "contents": "IncomingMessage(socket);"
        },
        {
            "trigger": "OutgoingMessage();",
            "contents": "OutgoingMessage();"
        },
        {
            "trigger": "ServerResponse(req);",
            "contents": "ServerResponse(req);"
        },
        {
            "trigger": "Agent(options);",
            "contents": "Agent(options);"
        },
        {
            "trigger": "ClientRequest(options, cb);",
            "contents": "ClientRequest(options, cb);"
        },
        {
            "trigger": "request(options, cb);",
            "contents": "request(options, cb);"
        },
        {
            "trigger": "get(options, cb);",
            "contents": "get(options, cb);"
        },
        {
            "trigger": "Server(requestListener);",
            "contents": "Server(requestListener);"
        },
        {
            "trigger": "createServer(requestListener);",
            "contents": "createServer(requestListener);"
        },
        {
            "trigger": "_connectionListener(socket);",
            "contents": "_connectionListener(socket);"
        },
        {
            "trigger": "Client(port, host);",
            "contents": "Client(port, host);"
        },
        {
            "trigger": "createClient(port, host);",
            "contents": "createClient(port, host);"
        },
        {
            "trigger": "Server(opts, requestListener);",
            "contents": "Server(opts, requestListener);"
        },
        {
            "trigger": "createServer(opts, requestListener);",
            "contents": "createServer(opts, requestListener);"
        },
        {
            "trigger": "Agent(options);",
            "contents": "Agent(options);"
        },
        {
            "trigger": "request(options, cb);",
            "contents": "request(options, cb);"
        },
        {
            "trigger": "get(options, cb);",
            "contents": "get(options, cb);"
        },
        {
            "trigger": "wrap(script);",
            "contents": "wrap(script);"
        },
        {
            "trigger": "_debug();",
            "contents": "_debug();"
        },
        {
            "trigger": "_findPath(request, paths);",
            "contents": "_findPath(request, paths);"
        },
        {
            "trigger": "_nodeModulePaths(from);",
            "contents": "_nodeModulePaths(from);"
        },
        {
            "trigger": "_resolveLookupPaths(request, parent);",
            "contents": "_resolveLookupPaths(request, parent);"
        },
        {
            "trigger": "_load(request, parent, isMain);",
            "contents": "_load(request, parent, isMain);"
        },
        {
            "trigger": "_resolveFilename(request, parent);",
            "contents": "_resolveFilename(request, parent);"
        },
        {
            "trigger": "runMain();",
            "contents": "runMain();"
        },
        {
            "trigger": "_initPaths();",
            "contents": "_initPaths();"
        },
        {
            "trigger": "requireRepl();",
            "contents": "requireRepl();"
        },
        {
            "trigger": "Module(id, parent);",
            "contents": "Module(id, parent);"
        },
        {
            "trigger": "createServer();",
            "contents": "createServer();"
        },
        {
            "trigger": "createConnection(port /* [host], [cb] */);",
            "contents": "createConnection(port /* [host], [cb] */);"
        },
        {
            "trigger": "connect(port /* [host], [cb] */);",
            "contents": "connect(port /* [host], [cb] */);"
        },
        {
            "trigger": "Socket(options);",
            "contents": "Socket(options);"
        },
        {
            "trigger": "Stream(options);",
            "contents": "Stream(options);"
        },
        {
            "trigger": "Server(/* [ options, ] listener */);",
            "contents": "Server(/* [ options, ] listener */);"
        },
        {
            "trigger": "_createServerHandle(address, port, addressType);",
            "contents": "_createServerHandle(address, port, addressType);"
        },
        {
            "trigger": "isIP(input);",
            "contents": "isIP(input);"
        },
        {
            "trigger": "isIPv4(input);",
            "contents": "isIPv4(input);"
        },
        {
            "trigger": "isIPv6(input);",
            "contents": "isIPv6(input);"
        },
        {
            "trigger": "hostname();",
            "contents": "hostname();"
        },
        {
            "trigger": "loadavg();",
            "contents": "loadavg();"
        },
        {
            "trigger": "uptime();",
            "contents": "uptime();"
        },
        {
            "trigger": "freemem();",
            "contents": "freemem();"
        },
        {
            "trigger": "totalmem();",
            "contents": "totalmem();"
        },
        {
            "trigger": "cpus();",
            "contents": "cpus();"
        },
        {
            "trigger": "type();",
            "contents": "type();"
        },
        {
            "trigger": "release();",
            "contents": "release();"
        },
        {
            "trigger": "networkInterfaces();",
            "contents": "networkInterfaces();"
        },
        {
            "trigger": "arch();",
            "contents": "arch();"
        },
        {
            "trigger": "platform();",
            "contents": "platform();"
        },
        {
            "trigger": "getNetworkInterfaces();",
            "contents": "getNetworkInterfaces();"
        },
        {
            "trigger": "resolve();",
            "contents": "resolve();"
        },
        {
            "trigger": "normalize(path);",
            "contents": "normalize(path);"
        },
        {
            "trigger": "join();",
            "contents": "join();"
        },
        {
            "trigger": "relative(from, to);",
            "contents": "relative(from, to);"
        },
        {
            "trigger": "dirname(path);",
            "contents": "dirname(path);"
        },
        {
            "trigger": "basename(path, ext);",
            "contents": "basename(path, ext);"
        },
        {
            "trigger": "extname(path);",
            "contents": "extname(path);"
        },
        {
            "trigger": "exists(path, callback);",
            "contents": "exists(path, callback);"
        },
        {
            "trigger": "existsSync(path);",
            "contents": "existsSync(path);"
        },
        {
            "trigger": "decode(input, preserveCase);",
            "contents": "decode(input, preserveCase);"
        },
        {
            "trigger": "encode(input, preserveCase);",
            "contents": "encode(input, preserveCase);"
        },
        {
            "trigger": "toASCII(domain);",
            "contents": "toASCII(domain);"
        },
        {
            "trigger": "toUnicode(domain);",
            "contents": "toUnicode(domain);"
        },
        {
            "trigger": "unescapeBuffer(s, decodeSpaces);",
            "contents": "unescapeBuffer(s, decodeSpaces);"
        },
        {
            "trigger": "unescape(s, decodeSpaces);",
            "contents": "unescape(s, decodeSpaces);"
        },
        {
            "trigger": "escape(str);",
            "contents": "escape(str);"
        },
        {
            "trigger": "encode(obj, sep, eq, name);",
            "contents": "encode(obj, sep, eq, name);"
        },
        {
            "trigger": "stringify(obj, sep, eq, name);",
            "contents": "stringify(obj, sep, eq, name);"
        },
        {
            "trigger": "decode(qs, sep, eq);",
            "contents": "decode(qs, sep, eq);"
        },
        {
            "trigger": "parse(qs, sep, eq);",
            "contents": "parse(qs, sep, eq);"
        },
        {
            "trigger": "createInterface(input, output, completer);",
            "contents": "createInterface(input, output, completer);"
        },
        {
            "trigger": "Interface(input, output, completer);",
            "contents": "Interface(input, output, completer);"
        },
        {
            "trigger": "writer(obj, showHidden, depth, colors);",
            "contents": "writer(obj, showHidden, depth, colors);"
        },
        {
            "trigger": "REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined);",
            "contents": "REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined);"
        },
        {
            "trigger": "start(prompt, source, eval, useGlobal);",
            "contents": "start(prompt, source, eval, useGlobal);"
        },
        {
            "trigger": "super_();",
            "contents": "super_();"
        },
        {
            "trigger": "Stream();",
            "contents": "Stream();"
        },
        {
            "trigger": "StringDecoder(encoding);",
            "contents": "StringDecoder(encoding);"
        },
        {
            "trigger": "print();",
            "contents": "print();"
        },
        {
            "trigger": "puts();",
            "contents": "puts();"
        },
        {
            "trigger": "debug(x);",
            "contents": "debug(x);"
        },
        {
            "trigger": "error(x);",
            "contents": "error(x);"
        },
        {
            "trigger": "inspect(obj, showHidden, depth, colors);",
            "contents": "inspect(obj, showHidden, depth, colors);"
        },
        {
            "trigger": "p();",
            "contents": "p();"
        },
        {
            "trigger": "log(msg);",
            "contents": "log(msg);"
        },
        {
            "trigger": "exec();",
            "contents": "exec();"
        },
        {
            "trigger": "pump(readStream, writeStream, callback);",
            "contents": "pump(readStream, writeStream, callback);"
        },
        {
            "trigger": "inherits(ctor, superCtor);",
            "contents": "inherits(ctor, superCtor);"
        },
        {
            "trigger": "unenroll(item);",
            "contents": "unenroll(item);"
        },
        {
            "trigger": "enroll(item, msecs);",
            "contents": "enroll(item, msecs);"
        },
        {
            "trigger": "active(item);",
            "contents": "active(item);"
        },
        {
            "trigger": "setTimeout(callback, after);",
            "contents": "setTimeout(callback, after);"
        },
        {
            "trigger": "clearTimeout(timer);",
            "contents": "clearTimeout(timer);"
        },
        {
            "trigger": "setInterval(callback, repeat);",
            "contents": "setInterval(callback, repeat);"
        },
        {
            "trigger": "clearInterval(timer);",
            "contents": "clearInterval(timer);"
        },
        {
            "trigger": "createSecurePair(credentials,\n                                    isServer,\n                                    requestCert,\n                                    rejectUnauthorized);",
            "contents": "createSecurePair(credentials,\n                                    isServer,\n                                    requestCert,\n                                    rejectUnauthorized);"
        },
        {
            "trigger": "Server(/* [options], listener */);",
            "contents": "Server(/* [options], listener */);"
        },
        {
            "trigger": "createServer(options, listener);",
            "contents": "createServer(options, listener);"
        },
        {
            "trigger": "connect(port /* host, options, cb */);",
            "contents": "connect(port /* host, options, cb */);"
        },
        {
            "trigger": "isatty(fd);",
            "contents": "isatty(fd);"
        },
        {
            "trigger": "setRawMode(flag);",
            "contents": "setRawMode(flag);"
        },
        {
            "trigger": "getWindowSize();",
            "contents": "getWindowSize();"
        },
        {
            "trigger": "setWindowSize();",
            "contents": "setWindowSize();"
        },
        {
            "trigger": "ReadStream(fd);",
            "contents": "ReadStream(fd);"
        },
        {
            "trigger": "WriteStream(fd);",
            "contents": "WriteStream(fd);"
        },
        {
            "trigger": "parse(url, parseQueryString, slashesDenoteHost);",
            "contents": "parse(url, parseQueryString, slashesDenoteHost);"
        },
        {
            "trigger": "resolve(source, relative);",
            "contents": "resolve(source, relative);"
        },
        {
            "trigger": "resolveObject(source, relative);",
            "contents": "resolveObject(source, relative);"
        },
        {
            "trigger": "format(obj);",
            "contents": "format(obj);"
        },
        {
            "trigger": "format(f);",
            "contents": "format(f);"
        },
        {
            "trigger": "print();",
            "contents": "print();"
        },
        {
            "trigger": "puts();",
            "contents": "puts();"
        },
        {
            "trigger": "debug(x);",
            "contents": "debug(x);"
        },
        {
            "trigger": "error(x);",
            "contents": "error(x);"
        },
        {
            "trigger": "inspect(obj, showHidden, depth, colors);",
            "contents": "inspect(obj, showHidden, depth, colors);"
        },
        {
            "trigger": "isArray(ar);",
            "contents": "isArray(ar);"
        },
        {
            "trigger": "isRegExp(re);",
            "contents": "isRegExp(re);"
        },
        {
            "trigger": "isDate(d);",
            "contents": "isDate(d);"
        },
        {
            "trigger": "isError(e);",
            "contents": "isError(e);"
        },
        {
            "trigger": "p();",
            "contents": "p();"
        },
        {
            "trigger": "log(msg);",
            "contents": "log(msg);"
        },
        {
            "trigger": "exec();",
            "contents": "exec();"
        },
        {
            "trigger": "pump(readStream, writeStream, callback);",
            "contents": "pump(readStream, writeStream, callback);"
        },
        {
            "trigger": "inherits(ctor, superCtor);",
            "contents": "inherits(ctor, superCtor);"
        },
        {
            "trigger": "Script();",
            "contents": "Script();"
        },
        {
            "trigger": "createScript(code, ctx, name);",
            "contents": "createScript(code, ctx, name);"
        },
        {
            "trigger": "createContext();",
            "contents": "createContext();"
        },
        {
            "trigger": "runInContext();",
            "contents": "runInContext();"
        },
        {
            "trigger": "runInThisContext();",
            "contents": "runInThisContext();"
        },
        {
            "trigger": "runInNewContext();",
            "contents": "runInNewContext();"
        },
        {
            "trigger": "Deflate(opts);",
            "contents": "Deflate(opts);"
        },
        {
            "trigger": "Inflate(opts);",
            "contents": "Inflate(opts);"
        },
        {
            "trigger": "Gzip(opts);",
            "contents": "Gzip(opts);"
        },
        {
            "trigger": "Gunzip(opts);",
            "contents": "Gunzip(opts);"
        },
        {
            "trigger": "DeflateRaw(opts);",
            "contents": "DeflateRaw(opts);"
        },
        {
            "trigger": "InflateRaw(opts);",
            "contents": "InflateRaw(opts);"
        },
        {
            "trigger": "Unzip(opts);",
            "contents": "Unzip(opts);"
        },
        {
            "trigger": "createDeflate(o);",
            "contents": "createDeflate(o);"
        },
        {
            "trigger": "createInflate(o);",
            "contents": "createInflate(o);"
        },
        {
            "trigger": "createDeflateRaw(o);",
            "contents": "createDeflateRaw(o);"
        },
        {
            "trigger": "createInflateRaw(o);",
            "contents": "createInflateRaw(o);"
        },
        {
            "trigger": "createGzip(o);",
            "contents": "createGzip(o);"
        },
        {
            "trigger": "createGunzip(o);",
            "contents": "createGunzip(o);"
        },
        {
            "trigger": "createUnzip(o);",
            "contents": "createUnzip(o);"
        },
        {
            "trigger": "deflate(buffer, callback);",
            "contents": "deflate(buffer, callback);"
        },
        {
            "trigger": "gzip(buffer, callback);",
            "contents": "gzip(buffer, callback);"
        },
        {
            "trigger": "deflateRaw(buffer, callback);",
            "contents": "deflateRaw(buffer, callback);"
        },
        {
            "trigger": "unzip(buffer, callback);",
            "contents": "unzip(buffer, callback);"
        },
        {
            "trigger": "inflate(buffer, callback);",
            "contents": "inflate(buffer, callback);"
        },
        {
            "trigger": "gunzip(buffer, callback);",
            "contents": "gunzip(buffer, callback);"
        },
        {
            "trigger": "inflateRaw(buffer, callback);",
            "contents": "inflateRaw(buffer, callback);"
        }
    ]
}